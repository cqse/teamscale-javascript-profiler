on:
  push:
    branches: '*'
    tags: 'v*'
  pull_request:
    branches: '*'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      ENV DBUS_SESSION_BUS_ADDRESS: /dev/null
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - uses: actions/cache@v3
        name: Setup Cypress cache
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build and test the Commons Library
        working-directory: ./packages/cqse-commons
        run: | 
          pnpm build
          pnpm test
      - name: Build and test our Instrumentation Library
        working-directory: ./packages/lib-instrument
        run: |
          pnpm build
          pnpm test
      - name: Build and test the Instrumenter
        working-directory: ./packages/teamscale-javascript-instrumenter
        run: |
          pnpm build
          pnpm test
      - name: Build and test the Collector
        working-directory: ./packages/teamscale-coverage-collector
        run: |
          pnpm build
          pnpm test
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run the system test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: pnpm systemtest
      - name: Publish the Commons Library
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: ./packages/cqse-commons
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          pnpm publish --ignore-scripts --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish the Instrumentation Library
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: ./packages/lib-instrument
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          pnpm publish --ignore-scripts --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish the Collector
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: ./packages/teamscale-coverage-collector
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          pnpm publish --ignore-scripts --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish the Instrumenter
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: ./packages/teamscale-javascript-instrumenter
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          pnpm publish --ignore-scripts --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker:
    name: Build the Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cqse/teamscale-coverage-collector
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: ls
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./packages/teamscale-coverage-collector
          file: ./packages/teamscale-coverage-collector/Dockerfile
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
