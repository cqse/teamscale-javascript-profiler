/** $IS_JS_PROFILER_INSTRUMENTED=true **/ (()=>{function d(e){let n=new Blob([e],{type:"text/javascript"}),t=URL.createObjectURL(n),s=new Worker(t);return URL.revokeObjectURL(t),s}function h(){return d('var r=class{constructor(e){this.cachedMessages=[];this.url=e,this.socket=this.createSocket()}createSocket(){let e=new WebSocket(this.url);return e.onopen=()=>this.onopen(),e.onclose=()=>this.onclose(),e}onclose(){this.socket=this.createSocket()}onopen(){console.log("Connection to Coverage Collector established."),this.cachedMessages.forEach(e=>this.socket.send(e)),this.cachedMessages=[]}send(e){this.socket.readyState===WebSocket.OPEN?this.socket.send(e):(this.cachedMessages.push(e),this.cachedMessages.length%500===0&&console.log(`More than ${this.cachedMessages.length} messages are queued to be sent.`))}};var C=20,m=1e3,d=class{constructor(e,t){this.milliseconds=e;this.onCountedToZero=t;this.timerHandle=null}restartCountdown(){this.stopCountdown(),this.timerHandle=self.setTimeout(()=>{this.stopCountdown(),this.onCountedToZero()},this.milliseconds)}stopCountdown(){this.timerHandle!==null&&(self.clearTimeout(this.timerHandle),this.timerHandle=null)}},a=class{constructor(e){this.socket=e,this.cachedCoveredRanges=new Map,this.numberOfCachedPositions=0,this.flushCountdown=new d(m,()=>this.flush())}addRange(e,t){if(!t.start.line||!t.end.line)return;let o=this.cachedCoveredRanges.get(e);o||(o=new Set,this.cachedCoveredRanges.set(e,o)),o.add(t),this.numberOfCachedPositions+=1,this.flushCountdown.restartCountdown(),this.numberOfCachedPositions>=C&&this.flush()}flush(){this.numberOfCachedPositions!==0&&(this.flushCountdown.stopCountdown(),this.cachedCoveredRanges.forEach((e,t)=>{let o=Array.from(e).map(n=>`${n.start.line}:${n.start.column}:${n.end.line}:${n.end.column}`);this.socket.send(`${"c"} ${t} ${o.join(" ")}`),e.clear()}),this.cachedCoveredRanges.clear(),this.numberOfCachedPositions=0)}};console.log("Starting coverage forwarding worker.");var u=new r("ws://localhost:54678/socket"),h=new a(u),f=new Map;onmessage=s=>{if(Array.isArray(s.data))p(s.data);else{let e=s.data;if(e.startsWith("s"))u.send(e);else if(e.startsWith("i")){let t=JSON.parse(e.substring(2));f.set(t.hash,t),console.info(`Received coverage mapping information for "${t.hash}".`)}else e==="unload"?h.flush():console.error(`No handler for message: ${e}`)}};function p(s){var n;let e=s[0],t=s[1],o=f.get(e);if(!o){console.log(`No coverage mapping information for ${e} available!`);return}for(let[c,i]of t.branches.entries()){let l=(n=o.branchMap[c])==null?void 0:n.locations[i];l&&h.addRange(e,l)}for(let c of t.statements){let i=o.statementMap[c];i&&h.addRange(e,i)}}\n')}function c(){return g()}function g(){return window}function p(e,n){let t=c()[e];return t||(t=n,c()[e]=t),t}var l;(function(r){r.MESSAGE_TYPE_SOURCEMAP="s",r.MESSAGE_TYPE_COVERAGE="c",r.ISTANBUL_COV_OBJECT="i",r.UNRESOLVED_CODE_ENTITY="u"})(l||(l={}));function v(e,n){let t=new Map;function s(i){let o=t.get(i);return o||(o={branches:new Map,statements:new Set},t.set(i,o),o)}function r(i,o,w){s(i).branches.set(o,w)}function u(i,o){s(i).statements.add(o)}function a(){n(t),t.clear()}return setInterval(()=>a(),e),{putBranchCoverage:r,putStatementCoverage:u,flush:a}}var C=p("__TS_AGENT",{});function f(){return C._$BcWorker}function S(e){return C._$BcWorker=e,e}var m=v(250,e=>{for(let n of e.entries())f().postMessage(n)});c()._$stmtCov=m.putStatementCoverage;c()._$brCov=m.putBranchCoverage;var b=new Set;c()._$registerCoverageObject=function(e){let n=e.hash;if(b.has(n)){console.log(`Coverage interceptor added twice for ${n}. This seems to be a bug in the instrumentation.`);return}else b.add(n);if(!f()){let t=S(new h);(function(){let r=()=>{m.flush(),t.postMessage("unload")},u=function(i,o){!o||o.addEventListener(i,r,{capture:!0})},a=g();u("blur",a),u("unload",a),u("visibilitychange",a),u("beforeunload",a)})()}(function(){f().postMessage(`${l.ISTANBUL_COV_OBJECT} ${JSON.stringify(e)}`);let s=p("sentMaps",new Set);e.inputSourceMap&&(s.has(e.path)||(f().postMessage(`${l.MESSAGE_TYPE_SOURCEMAP} ${n}:${JSON.stringify(e.inputSourceMap)}`),s.add(e.path)))})()};})();
 $wnd.showcase.runAsyncCallback44("\"function tWb(){var a,b,c,d,e;e=new gsc(5);Cvc((Jbc(),e.hb),'','cwSplitLayoutPanel');e.hb.style[cRc]='3px solid #e7e7e7';kjc(e,new wic('This is the first north component.'),50);ljc(e,new wic('This is the first south component.'),50);bsc(e,new wic('This is the east component.'),(Ijc(),Cjc),100,null);bsc(e,new wic('This is the west component.'),Hjc,100,null);kjc(e,new wic('This is the second north component.'),50);ljc(e,new wic('This is the second south component.'),50);c='This is some text to show how the contents on either side of the splitter flow.';for(d=0;d<3;d++){c+=' '+c}a=new wic(c);b=new Wfc(a);bsc(e,b,Bjc,0,null);return e}\nsDb(609,1,nRc);_.Ec=function AWb(){IFb(this.a,tWb())};PNc(El)(44);\n//# sourceURL=showcase-44.js\n";

const _$fiooe6u = "b9fb9ac169678cee12e6af18efd01074a3870915";
function cov_2j3bhpnqac() {
  var path = "test/casestudies/gwt-showcase-js/war/showcase/deferredjs/296BBC4AF4173B93C2CA7B645A17EDDC/44.cache.js";
  var hash = "b9fb9ac169678cee12e6af18efd01074a3870915";
  var global = typeof window === 'object' ? window : this;
  var gcv = "__coverage__";
  var coverageData = {
    path: "test/casestudies/gwt-showcase-js/war/showcase/deferredjs/296BBC4AF4173B93C2CA7B645A17EDDC/44.cache.js",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9fb9ac169678cee12e6af18efd01074a3870915"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage=_$registerCoverageObject(coverage[path]);
  {
    // @ts-ignore
    cov_2j3bhpnqac = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2j3bhpnqac();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmozYmhwbnFhYyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiXSwic291cmNlcyI6WyI0NC5jYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcImZ1bmN0aW9uIHRXYigpe3ZhciBhLGIsYyxkLGU7ZT1uZXcgZ3NjKDUpO0N2YygoSmJjKCksZS5oYiksJycsJ2N3U3BsaXRMYXlvdXRQYW5lbCcpO2UuaGIuc3R5bGVbY1JjXT0nM3B4IHNvbGlkICNlN2U3ZTcnO2tqYyhlLG5ldyB3aWMoJ1RoaXMgaXMgdGhlIGZpcnN0IG5vcnRoIGNvbXBvbmVudC4nKSw1MCk7bGpjKGUsbmV3IHdpYygnVGhpcyBpcyB0aGUgZmlyc3Qgc291dGggY29tcG9uZW50LicpLDUwKTtic2MoZSxuZXcgd2ljKCdUaGlzIGlzIHRoZSBlYXN0IGNvbXBvbmVudC4nKSwoSWpjKCksQ2pjKSwxMDAsbnVsbCk7YnNjKGUsbmV3IHdpYygnVGhpcyBpcyB0aGUgd2VzdCBjb21wb25lbnQuJyksSGpjLDEwMCxudWxsKTtramMoZSxuZXcgd2ljKCdUaGlzIGlzIHRoZSBzZWNvbmQgbm9ydGggY29tcG9uZW50LicpLDUwKTtsamMoZSxuZXcgd2ljKCdUaGlzIGlzIHRoZSBzZWNvbmQgc291dGggY29tcG9uZW50LicpLDUwKTtjPSdUaGlzIGlzIHNvbWUgdGV4dCB0byBzaG93IGhvdyB0aGUgY29udGVudHMgb24gZWl0aGVyIHNpZGUgb2YgdGhlIHNwbGl0dGVyIGZsb3cuJztmb3IoZD0wO2Q8MztkKyspe2MrPScgJytjfWE9bmV3IHdpYyhjKTtiPW5ldyBXZmMoYSk7YnNjKGUsYixCamMsMCxudWxsKTtyZXR1cm4gZX1cXG5zRGIoNjA5LDEsblJjKTtfLkVjPWZ1bmN0aW9uIEFXYigpe0lGYih0aGlzLmEsdFdiKCkpfTtQTmMoRWwpKDQ0KTtcXG4vLyMgc291cmNlVVJMPXNob3djYXNlLTQ0LmpzXFxuXCIiXSwibWFwcGluZ3MiOiJBQUFBLG11QkFBbXVCLFVBQUFBLGVBQUEsTUFBQUMsSUFBQSw2R0FBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEseUdBQUFNLFlBQUEsSUFBQUMsS0FBQSxJQUFBQyxTQUFBLElBQUFDLENBQUEsSUFBQUMsQ0FBQSxJQUFBQyxDQUFBLElBQUFDLGVBQUEsNENBQUFYLElBQUEsaURBQUFZLFFBQUEsQ0FBQVgsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBUyxRQUFBLENBQUFiLElBQUEsR0FBQWEsUUFBQSxDQUFBYixJQUFBLEVBQUFDLElBQUEsR0FBQUEsSUFBQSxFQUFBWSxRQUFBLENBQUFiLElBQUEsRUFBQUssWUFBQSxNQUFBUyxjQUFBLENBQUFELFFBQUEsQ0FBQWIsSUFBQSxHQWV2dEI7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUFlLGNBQUEsV0FBQUEsY0FBQSxFQUFBZixjQUFBIn0=")